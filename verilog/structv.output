Grammar

    0 $accept: file $end

    1 file: module
    2     | file module

    3 module: module_head statements module_tail

    4 module_head: MODULE ID LPAREN id_list RPAREN

    5 id_list: id_list_empty
    6        | id_list_some

    7 id_list_empty: /* empty */

    8 id_list_some: obj_name
    9             | id_list_some COMMA obj_name

   10 module_tail: ENDMODULE

   11 statements: statements SEMICOLON statement
   12           | statement

   13 statement: input_decl
   14          | output_decl
   15          | wire_decl
   16          | module_inst
   17          | assign_stm
   18          | /* empty */

   19 input_decl: INPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   20           | INPUT id_list_some

   21 output_decl: OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   22            | OUTPUT id_list_some

   23 wire_decl: WIRE id_list_some
   24          | WIRE LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some

   25 module_inst: ID obj_name LPAREN module_inputs RPAREN

   26 module_inputs: DOT ID LPAREN expression RPAREN
   27              | DOT ID LPAREN RPAREN
   28              | module_inputs COMMA DOT ID LPAREN expression RPAREN
   29              | module_inputs COMMA DOT ID LPAREN RPAREN

   30 expression: obj_name
   31           | ID LBRACKET NUMBER COLON NUMBER RBRACKET
   32           | BINCONST
   33           | LBRACE exp_list RBRACE

   34 exp_list: expression
   35         | exp_list COMMA expression

   36 obj_name: ID
   37         | ID LBRACKET NUMBER RBRACKET
   38         | ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

   39 assign_stm: ASSIGN obj_name EQUALS expression


Terminals, with rules where they appear

$end (0) 0
error (256)
MODULE (258) 4
INPUT (259) 19 20
OUTPUT (260) 21 22
WIRE (261) 23 24
ENDMODULE (262) 10
LPAREN (263) 4 25 26 27 28 29
ASSIGN (264) 39
EQUALS (265) 39
COMMA (266) 9 28 29 35
RPAREN (267) 4 25 26 27 28 29
LBRACKET (268) 19 21 24 31 37 38
RBRACKET (269) 19 21 24 31 37 38
DOT (270) 26 27 28 29
SEMICOLON (271) 11
COLON (272) 19 21 24 31
LBRACE (273) 33
RBRACE (274) 33
NUMBER (275) 19 21 24 31 37 38
ID (276) 4 25 26 27 28 29 31 36 37 38
BINCONST (277) 32


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
file (24)
    on left: 1 2, on right: 0 2
module (25)
    on left: 3, on right: 1 2
module_head (26)
    on left: 4, on right: 3
id_list (27)
    on left: 5 6, on right: 4
id_list_empty (28)
    on left: 7, on right: 5
id_list_some (29)
    on left: 8 9, on right: 6 9 19 20 21 22 23 24
module_tail (30)
    on left: 10, on right: 3
statements (31)
    on left: 11 12, on right: 3 11
statement (32)
    on left: 13 14 15 16 17 18, on right: 11 12
input_decl (33)
    on left: 19 20, on right: 13
output_decl (34)
    on left: 21 22, on right: 14
wire_decl (35)
    on left: 23 24, on right: 15
module_inst (36)
    on left: 25, on right: 16
module_inputs (37)
    on left: 26 27 28 29, on right: 25 28 29
expression (38)
    on left: 30 31 32 33, on right: 26 28 34 35 39
exp_list (39)
    on left: 34 35, on right: 33 35
obj_name (40)
    on left: 36 37 38, on right: 8 9 25 30 39
assign_stm (41)
    on left: 39, on right: 17


state 0

    0 $accept: . file $end
    1 file: . module
    2     | . file module
    3 module: . module_head statements module_tail
    4 module_head: . MODULE ID LPAREN id_list RPAREN

    MODULE  shift, and go to state 1

    file         go to state 2
    module       go to state 3
    module_head  go to state 4


state 1

    4 module_head: MODULE . ID LPAREN id_list RPAREN

    ID  shift, and go to state 5


state 2

    0 $accept: file . $end
    2 file: file . module
    3 module: . module_head statements module_tail
    4 module_head: . MODULE ID LPAREN id_list RPAREN

    $end    shift, and go to state 6
    MODULE  shift, and go to state 1

    module       go to state 7
    module_head  go to state 4


state 3

    1 file: module .

    $default  reduce using rule 1 (file)


state 4

    3 module: module_head . statements module_tail
   11 statements: . statements SEMICOLON statement
   12           | . statement
   13 statement: . input_decl
   14          | . output_decl
   15          | . wire_decl
   16          | . module_inst
   17          | . assign_stm
   18          | .  [ENDMODULE, SEMICOLON]
   19 input_decl: . INPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   20           | . INPUT id_list_some
   21 output_decl: . OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   22            | . OUTPUT id_list_some
   23 wire_decl: . WIRE id_list_some
   24          | . WIRE LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   25 module_inst: . ID obj_name LPAREN module_inputs RPAREN
   39 assign_stm: . ASSIGN obj_name EQUALS expression

    INPUT   shift, and go to state 8
    OUTPUT  shift, and go to state 9
    WIRE    shift, and go to state 10
    ASSIGN  shift, and go to state 11
    ID      shift, and go to state 12

    $default  reduce using rule 18 (statement)

    statements   go to state 13
    statement    go to state 14
    input_decl   go to state 15
    output_decl  go to state 16
    wire_decl    go to state 17
    module_inst  go to state 18
    assign_stm   go to state 19


state 5

    4 module_head: MODULE ID . LPAREN id_list RPAREN

    LPAREN  shift, and go to state 20


state 6

    0 $accept: file $end .

    $default  accept


state 7

    2 file: file module .

    $default  reduce using rule 2 (file)


state 8

    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   19 input_decl: INPUT . LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   20           | INPUT . id_list_some
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACKET  shift, and go to state 21
    ID        shift, and go to state 22

    id_list_some  go to state 23
    obj_name      go to state 24


state 9

    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   21 output_decl: OUTPUT . LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   22            | OUTPUT . id_list_some
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACKET  shift, and go to state 25
    ID        shift, and go to state 22

    id_list_some  go to state 26
    obj_name      go to state 24


state 10

    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   23 wire_decl: WIRE . id_list_some
   24          | WIRE . LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACKET  shift, and go to state 27
    ID        shift, and go to state 22

    id_list_some  go to state 28
    obj_name      go to state 24


state 11

   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET
   39 assign_stm: ASSIGN . obj_name EQUALS expression

    ID  shift, and go to state 22

    obj_name  go to state 29


state 12

   25 module_inst: ID . obj_name LPAREN module_inputs RPAREN
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    ID  shift, and go to state 22

    obj_name  go to state 30


state 13

    3 module: module_head statements . module_tail
   10 module_tail: . ENDMODULE
   11 statements: statements . SEMICOLON statement

    ENDMODULE  shift, and go to state 31
    SEMICOLON  shift, and go to state 32

    module_tail  go to state 33


state 14

   12 statements: statement .

    $default  reduce using rule 12 (statements)


state 15

   13 statement: input_decl .

    $default  reduce using rule 13 (statement)


state 16

   14 statement: output_decl .

    $default  reduce using rule 14 (statement)


state 17

   15 statement: wire_decl .

    $default  reduce using rule 15 (statement)


state 18

   16 statement: module_inst .

    $default  reduce using rule 16 (statement)


state 19

   17 statement: assign_stm .

    $default  reduce using rule 17 (statement)


state 20

    4 module_head: MODULE ID LPAREN . id_list RPAREN
    5 id_list: . id_list_empty
    6        | . id_list_some
    7 id_list_empty: .  [RPAREN]
    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    ID  shift, and go to state 22

    $default  reduce using rule 7 (id_list_empty)

    id_list        go to state 34
    id_list_empty  go to state 35
    id_list_some   go to state 36
    obj_name       go to state 24


state 21

   19 input_decl: INPUT LBRACKET . NUMBER COLON NUMBER RBRACKET id_list_some

    NUMBER  shift, and go to state 37


state 22

   36 obj_name: ID .  [ENDMODULE, LPAREN, EQUALS, COMMA, RPAREN, SEMICOLON]
   37         | ID . LBRACKET NUMBER RBRACKET
   38         | ID . LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACKET  shift, and go to state 38

    $default  reduce using rule 36 (obj_name)


state 23

    9 id_list_some: id_list_some . COMMA obj_name
   20 input_decl: INPUT id_list_some .  [ENDMODULE, SEMICOLON]

    COMMA  shift, and go to state 39

    $default  reduce using rule 20 (input_decl)


state 24

    8 id_list_some: obj_name .

    $default  reduce using rule 8 (id_list_some)


state 25

   21 output_decl: OUTPUT LBRACKET . NUMBER COLON NUMBER RBRACKET id_list_some

    NUMBER  shift, and go to state 40


state 26

    9 id_list_some: id_list_some . COMMA obj_name
   22 output_decl: OUTPUT id_list_some .  [ENDMODULE, SEMICOLON]

    COMMA  shift, and go to state 39

    $default  reduce using rule 22 (output_decl)


state 27

   24 wire_decl: WIRE LBRACKET . NUMBER COLON NUMBER RBRACKET id_list_some

    NUMBER  shift, and go to state 41


state 28

    9 id_list_some: id_list_some . COMMA obj_name
   23 wire_decl: WIRE id_list_some .  [ENDMODULE, SEMICOLON]

    COMMA  shift, and go to state 39

    $default  reduce using rule 23 (wire_decl)


state 29

   39 assign_stm: ASSIGN obj_name . EQUALS expression

    EQUALS  shift, and go to state 42


state 30

   25 module_inst: ID obj_name . LPAREN module_inputs RPAREN

    LPAREN  shift, and go to state 43


state 31

   10 module_tail: ENDMODULE .

    $default  reduce using rule 10 (module_tail)


state 32

   11 statements: statements SEMICOLON . statement
   13 statement: . input_decl
   14          | . output_decl
   15          | . wire_decl
   16          | . module_inst
   17          | . assign_stm
   18          | .  [ENDMODULE, SEMICOLON]
   19 input_decl: . INPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   20           | . INPUT id_list_some
   21 output_decl: . OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   22            | . OUTPUT id_list_some
   23 wire_decl: . WIRE id_list_some
   24          | . WIRE LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some
   25 module_inst: . ID obj_name LPAREN module_inputs RPAREN
   39 assign_stm: . ASSIGN obj_name EQUALS expression

    INPUT   shift, and go to state 8
    OUTPUT  shift, and go to state 9
    WIRE    shift, and go to state 10
    ASSIGN  shift, and go to state 11
    ID      shift, and go to state 12

    $default  reduce using rule 18 (statement)

    statement    go to state 44
    input_decl   go to state 15
    output_decl  go to state 16
    wire_decl    go to state 17
    module_inst  go to state 18
    assign_stm   go to state 19


state 33

    3 module: module_head statements module_tail .

    $default  reduce using rule 3 (module)


state 34

    4 module_head: MODULE ID LPAREN id_list . RPAREN

    RPAREN  shift, and go to state 45


state 35

    5 id_list: id_list_empty .

    $default  reduce using rule 5 (id_list)


state 36

    6 id_list: id_list_some .  [RPAREN]
    9 id_list_some: id_list_some . COMMA obj_name

    COMMA  shift, and go to state 39

    $default  reduce using rule 6 (id_list)


state 37

   19 input_decl: INPUT LBRACKET NUMBER . COLON NUMBER RBRACKET id_list_some

    COLON  shift, and go to state 46


state 38

   37 obj_name: ID LBRACKET . NUMBER RBRACKET
   38         | ID LBRACKET . NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    NUMBER  shift, and go to state 47


state 39

    9 id_list_some: id_list_some COMMA . obj_name
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    ID  shift, and go to state 22

    obj_name  go to state 48


state 40

   21 output_decl: OUTPUT LBRACKET NUMBER . COLON NUMBER RBRACKET id_list_some

    COLON  shift, and go to state 49


state 41

   24 wire_decl: WIRE LBRACKET NUMBER . COLON NUMBER RBRACKET id_list_some

    COLON  shift, and go to state 50


state 42

   30 expression: . obj_name
   31           | . ID LBRACKET NUMBER COLON NUMBER RBRACKET
   32           | . BINCONST
   33           | . LBRACE exp_list RBRACE
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET
   39 assign_stm: ASSIGN obj_name EQUALS . expression

    LBRACE    shift, and go to state 51
    ID        shift, and go to state 52
    BINCONST  shift, and go to state 53

    expression  go to state 54
    obj_name    go to state 55


state 43

   25 module_inst: ID obj_name LPAREN . module_inputs RPAREN
   26 module_inputs: . DOT ID LPAREN expression RPAREN
   27              | . DOT ID LPAREN RPAREN
   28              | . module_inputs COMMA DOT ID LPAREN expression RPAREN
   29              | . module_inputs COMMA DOT ID LPAREN RPAREN

    DOT  shift, and go to state 56

    module_inputs  go to state 57


state 44

   11 statements: statements SEMICOLON statement .

    $default  reduce using rule 11 (statements)


state 45

    4 module_head: MODULE ID LPAREN id_list RPAREN .

    $default  reduce using rule 4 (module_head)


state 46

   19 input_decl: INPUT LBRACKET NUMBER COLON . NUMBER RBRACKET id_list_some

    NUMBER  shift, and go to state 58


state 47

   37 obj_name: ID LBRACKET NUMBER . RBRACKET
   38         | ID LBRACKET NUMBER . RBRACKET LBRACKET NUMBER RBRACKET

    RBRACKET  shift, and go to state 59


state 48

    9 id_list_some: id_list_some COMMA obj_name .

    $default  reduce using rule 9 (id_list_some)


state 49

   21 output_decl: OUTPUT LBRACKET NUMBER COLON . NUMBER RBRACKET id_list_some

    NUMBER  shift, and go to state 60


state 50

   24 wire_decl: WIRE LBRACKET NUMBER COLON . NUMBER RBRACKET id_list_some

    NUMBER  shift, and go to state 61


state 51

   30 expression: . obj_name
   31           | . ID LBRACKET NUMBER COLON NUMBER RBRACKET
   32           | . BINCONST
   33           | . LBRACE exp_list RBRACE
   33           | LBRACE . exp_list RBRACE
   34 exp_list: . expression
   35         | . exp_list COMMA expression
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACE    shift, and go to state 51
    ID        shift, and go to state 52
    BINCONST  shift, and go to state 53

    expression  go to state 62
    exp_list    go to state 63
    obj_name    go to state 55


state 52

   31 expression: ID . LBRACKET NUMBER COLON NUMBER RBRACKET
   36 obj_name: ID .  [ENDMODULE, COMMA, RPAREN, SEMICOLON, RBRACE]
   37         | ID . LBRACKET NUMBER RBRACKET
   38         | ID . LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACKET  shift, and go to state 64

    $default  reduce using rule 36 (obj_name)


state 53

   32 expression: BINCONST .

    $default  reduce using rule 32 (expression)


state 54

   39 assign_stm: ASSIGN obj_name EQUALS expression .

    $default  reduce using rule 39 (assign_stm)


state 55

   30 expression: obj_name .

    $default  reduce using rule 30 (expression)


state 56

   26 module_inputs: DOT . ID LPAREN expression RPAREN
   27              | DOT . ID LPAREN RPAREN

    ID  shift, and go to state 65


state 57

   25 module_inst: ID obj_name LPAREN module_inputs . RPAREN
   28 module_inputs: module_inputs . COMMA DOT ID LPAREN expression RPAREN
   29              | module_inputs . COMMA DOT ID LPAREN RPAREN

    COMMA   shift, and go to state 66
    RPAREN  shift, and go to state 67


state 58

   19 input_decl: INPUT LBRACKET NUMBER COLON NUMBER . RBRACKET id_list_some

    RBRACKET  shift, and go to state 68


state 59

   37 obj_name: ID LBRACKET NUMBER RBRACKET .  [ENDMODULE, LPAREN, EQUALS, COMMA, RPAREN, SEMICOLON, RBRACE]
   38         | ID LBRACKET NUMBER RBRACKET . LBRACKET NUMBER RBRACKET

    LBRACKET  shift, and go to state 69

    $default  reduce using rule 37 (obj_name)


state 60

   21 output_decl: OUTPUT LBRACKET NUMBER COLON NUMBER . RBRACKET id_list_some

    RBRACKET  shift, and go to state 70


state 61

   24 wire_decl: WIRE LBRACKET NUMBER COLON NUMBER . RBRACKET id_list_some

    RBRACKET  shift, and go to state 71


state 62

   34 exp_list: expression .

    $default  reduce using rule 34 (exp_list)


state 63

   33 expression: LBRACE exp_list . RBRACE
   35 exp_list: exp_list . COMMA expression

    COMMA   shift, and go to state 72
    RBRACE  shift, and go to state 73


state 64

   31 expression: ID LBRACKET . NUMBER COLON NUMBER RBRACKET
   37 obj_name: ID LBRACKET . NUMBER RBRACKET
   38         | ID LBRACKET . NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    NUMBER  shift, and go to state 74


state 65

   26 module_inputs: DOT ID . LPAREN expression RPAREN
   27              | DOT ID . LPAREN RPAREN

    LPAREN  shift, and go to state 75


state 66

   28 module_inputs: module_inputs COMMA . DOT ID LPAREN expression RPAREN
   29              | module_inputs COMMA . DOT ID LPAREN RPAREN

    DOT  shift, and go to state 76


state 67

   25 module_inst: ID obj_name LPAREN module_inputs RPAREN .

    $default  reduce using rule 25 (module_inst)


state 68

    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   19 input_decl: INPUT LBRACKET NUMBER COLON NUMBER RBRACKET . id_list_some
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    ID  shift, and go to state 22

    id_list_some  go to state 77
    obj_name      go to state 24


state 69

   38 obj_name: ID LBRACKET NUMBER RBRACKET LBRACKET . NUMBER RBRACKET

    NUMBER  shift, and go to state 78


state 70

    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   21 output_decl: OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET . id_list_some
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    ID  shift, and go to state 22

    id_list_some  go to state 79
    obj_name      go to state 24


state 71

    8 id_list_some: . obj_name
    9             | . id_list_some COMMA obj_name
   24 wire_decl: WIRE LBRACKET NUMBER COLON NUMBER RBRACKET . id_list_some
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    ID  shift, and go to state 22

    id_list_some  go to state 80
    obj_name      go to state 24


state 72

   30 expression: . obj_name
   31           | . ID LBRACKET NUMBER COLON NUMBER RBRACKET
   32           | . BINCONST
   33           | . LBRACE exp_list RBRACE
   35 exp_list: exp_list COMMA . expression
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    LBRACE    shift, and go to state 51
    ID        shift, and go to state 52
    BINCONST  shift, and go to state 53

    expression  go to state 81
    obj_name    go to state 55


state 73

   33 expression: LBRACE exp_list RBRACE .

    $default  reduce using rule 33 (expression)


state 74

   31 expression: ID LBRACKET NUMBER . COLON NUMBER RBRACKET
   37 obj_name: ID LBRACKET NUMBER . RBRACKET
   38         | ID LBRACKET NUMBER . RBRACKET LBRACKET NUMBER RBRACKET

    RBRACKET  shift, and go to state 59
    COLON     shift, and go to state 82


state 75

   26 module_inputs: DOT ID LPAREN . expression RPAREN
   27              | DOT ID LPAREN . RPAREN
   30 expression: . obj_name
   31           | . ID LBRACKET NUMBER COLON NUMBER RBRACKET
   32           | . BINCONST
   33           | . LBRACE exp_list RBRACE
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    RPAREN    shift, and go to state 83
    LBRACE    shift, and go to state 51
    ID        shift, and go to state 52
    BINCONST  shift, and go to state 53

    expression  go to state 84
    obj_name    go to state 55


state 76

   28 module_inputs: module_inputs COMMA DOT . ID LPAREN expression RPAREN
   29              | module_inputs COMMA DOT . ID LPAREN RPAREN

    ID  shift, and go to state 85


state 77

    9 id_list_some: id_list_some . COMMA obj_name
   19 input_decl: INPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some .  [ENDMODULE, SEMICOLON]

    COMMA  shift, and go to state 39

    $default  reduce using rule 19 (input_decl)


state 78

   38 obj_name: ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER . RBRACKET

    RBRACKET  shift, and go to state 86


state 79

    9 id_list_some: id_list_some . COMMA obj_name
   21 output_decl: OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some .  [ENDMODULE, SEMICOLON]

    COMMA  shift, and go to state 39

    $default  reduce using rule 21 (output_decl)


state 80

    9 id_list_some: id_list_some . COMMA obj_name
   24 wire_decl: WIRE LBRACKET NUMBER COLON NUMBER RBRACKET id_list_some .  [ENDMODULE, SEMICOLON]

    COMMA  shift, and go to state 39

    $default  reduce using rule 24 (wire_decl)


state 81

   35 exp_list: exp_list COMMA expression .

    $default  reduce using rule 35 (exp_list)


state 82

   31 expression: ID LBRACKET NUMBER COLON . NUMBER RBRACKET

    NUMBER  shift, and go to state 87


state 83

   27 module_inputs: DOT ID LPAREN RPAREN .

    $default  reduce using rule 27 (module_inputs)


state 84

   26 module_inputs: DOT ID LPAREN expression . RPAREN

    RPAREN  shift, and go to state 88


state 85

   28 module_inputs: module_inputs COMMA DOT ID . LPAREN expression RPAREN
   29              | module_inputs COMMA DOT ID . LPAREN RPAREN

    LPAREN  shift, and go to state 89


state 86

   38 obj_name: ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET .

    $default  reduce using rule 38 (obj_name)


state 87

   31 expression: ID LBRACKET NUMBER COLON NUMBER . RBRACKET

    RBRACKET  shift, and go to state 90


state 88

   26 module_inputs: DOT ID LPAREN expression RPAREN .

    $default  reduce using rule 26 (module_inputs)


state 89

   28 module_inputs: module_inputs COMMA DOT ID LPAREN . expression RPAREN
   29              | module_inputs COMMA DOT ID LPAREN . RPAREN
   30 expression: . obj_name
   31           | . ID LBRACKET NUMBER COLON NUMBER RBRACKET
   32           | . BINCONST
   33           | . LBRACE exp_list RBRACE
   36 obj_name: . ID
   37         | . ID LBRACKET NUMBER RBRACKET
   38         | . ID LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET

    RPAREN    shift, and go to state 91
    LBRACE    shift, and go to state 51
    ID        shift, and go to state 52
    BINCONST  shift, and go to state 53

    expression  go to state 92
    obj_name    go to state 55


state 90

   31 expression: ID LBRACKET NUMBER COLON NUMBER RBRACKET .

    $default  reduce using rule 31 (expression)


state 91

   29 module_inputs: module_inputs COMMA DOT ID LPAREN RPAREN .

    $default  reduce using rule 29 (module_inputs)


state 92

   28 module_inputs: module_inputs COMMA DOT ID LPAREN expression . RPAREN

    RPAREN  shift, and go to state 93


state 93

   28 module_inputs: module_inputs COMMA DOT ID LPAREN expression RPAREN .

    $default  reduce using rule 28 (module_inputs)
