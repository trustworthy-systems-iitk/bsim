bsim is an algorithmic inference tool that processes gate-level netlists. The
input to the tool is a flat verilog netlist consisting of gates and latches.
The output of the tool is an _abstracted_ verilog netlist that contains 
inferred high-level components such adders, subtractors, register files etc.

COMPILING AND RUNNING BSIM
--------------------------

0. Make sure your system has the necessary libraries installed. These are:
    - IBM CPLEX Solver
    - GLPK Solver
    - Boost C++ libraries v1.50 or higher
   
   All this software is already installed on sat6, so it might be best to use
   that machine.

1. Clone the bsim repository.

     This step is only required if you don't have a copy of bsim on the machine
     you are planning to use. 

     $ hg clone https://spramod@bitbucket.org/spramod/bsim

2. Build CUDD
     
  $  cd bsim/cudd-2.4.2/
  $  make
  $  cd obj/
  $  make
  $  cd ../..
     
3. Build MiniSAT

  $  cd minisat/
  $  export MROOT=`pwd`
  $  cd core/
  $  make libr

4. Build bsim

  $ cd verilog/
  $ make


If all this succeeds, you have successfully built bsim.

RUNNING BSIM
------------

One example run is as follows:

$ ./bsim -o configs/default.xml tests/router_flat.v

This command asks bsim to analyze the design in tests/router_flat.v. The 
output files produced by BSIM using this command are:

  - results/router_flat.summary           : this contains a summary of the 
                                            inferred components found by bsim

  - results/verilog/router_flat.v and 
    results/verilog/router_flat.library.v : these two files contain an 
                                            "abstracted" version of the router
                                            design.

